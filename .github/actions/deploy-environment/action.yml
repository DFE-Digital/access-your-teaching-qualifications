name: Deploy environment to AKS
description: Deploys an application environment to AKS

inputs:
  environment:
    description: The name of the environment
    required: true
  image-tag:
    description: The image tag to deploy
    required: true
  azure-client-id:
    description: Azure Client ID for authentication
    required: true
  azure-tenant-id:
    description: Azure Tenant ID for authentication
    required: true
  azure-subscription-id:
    description: Azure Subscription ID for authentication
    required: true
  pull-request-number:
    description: The pull request number which triggered this deploy.
    required: false

outputs:
  environment_url:
    description: The base external URL for the deployed environment
    value: ${{ steps.set_outputs.outputs.EXTERNAL_ACCESS_URL }}

runs:
  using: composite

  steps:
    - uses: hashicorp/setup-terraform@b9cd54a3c349d3f38e8881555d616ced269862dd # Pinned at v3.1.2
      with:
        terraform_version: 1.6.4
        terraform_wrapper: false

    - uses: DFE-Digital/github-actions/set-kubelogin-environment@master
      with:
        azure-client-id: ${{ inputs.azure-client-id }}
        azure-tenant-id: ${{ inputs.azure-tenant-id }}
        azure-subscription-id: ${{ inputs.azure-subscription-id }}

    - uses: google-github-actions/auth@v2
      with:
        project_id: teaching-qualifications
        workload_identity_provider: projects/708780292301/locations/global/workloadIdentityPools/access-your-teaching-qualificati/providers/access-your-teaching-qualificati

    - name: Terraform Apply
      shell: bash
      run: |
        make ci ${{ inputs.environment }} terraform-apply
      env:
        DOCKER_IMAGE_TAG: ${{ inputs.image-tag }}
        PR_NUMBER: ${{ inputs.pull-request-number }}

    - name: Extract Terraform outputs
      shell: bash
      id: set_outputs
      run: |
        access_url=$(terraform -chdir=terraform/application output -json urls | jq -r '.[0]')
        echo "ACCESS_URL=$access_url" >> $GITHUB_OUTPUT
        check_url=$(terraform -chdir=terraform/application output -json urls | jq -r '.[1]')
        echo "CHECK_URL=$check_url" >> $GITHUB_OUTPUT

        external_urls=$(terraform -chdir=terraform/application output -json external_urls)
        external_access_url=$(echo $external_urls | jq -r '.[0]')
        external_check_url=$(echo $external_urls | jq -r '.[1]')
        echo "EXTERNAL_ACCESS_URL=$external_access_url" >> $GITHUB_OUTPUT
        echo "EXTERNAL_CHECK_URL=$external_check_url" >> $GITHUB_OUTPUT

    - name: Run smoke tests
      shell: bash
      run: |
        # Parse the JSON array of internal URLs into a Bash array
        internal_urls=$(terraform -chdir=terraform/application output -json urls | jq -r '.[]')

        # Get the external URLs
        external_access_url="${{ steps.set_outputs.outputs.EXTERNAL_ACCESS_URL }}"
        external_check_url="${{ steps.set_outputs.outputs.EXTERNAL_CHECK_URL }}"

        echo "Internal URLs:"
        echo "$internal_urls"

        # Function to perform health check
        perform_health_check() {
          local url="$1"
          echo "Check health for $url/health/all.json..."
          curl -sS --fail "$url/health/all.json" > /dev/null && echo "Health check passed for $url/health/all.json" || echo "Health check failed for $url/health/all.json"
        }

        # Loop over each internal URL and perform the health checks
        for url in $internal_urls; do
          perform_health_check "$url"
        done

        # Perform health checks on external URLs if they exist
        if [ -n "$external_access_url" ] && [ -n "$external_check_url" ]; then
          echo "External Access URL: $external_access_url"
          echo "External Check URL: $external_check_url"
          perform_health_check "$external_access_url"
          perform_health_check "$external_check_url"
        else
          echo "External URLs not available. Skipping external health checks."
        fi
